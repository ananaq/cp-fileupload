import fs from "fs-extra";
import { glob } from "glob";
import { parse } from "node-html-parser";
import * as path from "node:path";

const cwd = process.cwd();
const iconsDir = path.join(cwd, "src", "icons");
const inputDir = path.join(iconsDir, "svg");
const generatedDir = path.join(iconsDir, "generated");
const outputDir = path.join(cwd, "public", "icons");

async function main() {
  const files = glob
    .sync("**/*.svg", { cwd: inputDir })
    .sort((a, b) => a.localeCompare(b));

  if (files.length === 0) {
    console.log(`No SVG files found in ${path.relative(cwd, inputDir)}`);
    return;
  }

  await generateIconFiles();

  async function generateIconFiles() {
    const spriteFilepath = path.join(outputDir, "sprite.svg");
    const typeOutputFilepath = path.join(generatedDir, "icon-name.d.ts");
    const arrayOutputFilepath = path.join(generatedDir, "icon-names.ts");

    const iconNames = files.map((file) => iconName(file));

    // Generate SVG sprite
    await generateSvgSprite({
      files,
      inputDir,
      outputPath: spriteFilepath,
    });

    // Generate TypeScript types
    const stringifiedIconNames = iconNames.map((name) => `'${name}'`);
    const outputGeneratedContent = `// This file is generated by npm run generate:icons`;

    const outputTypeContent = `${outputGeneratedContent}\nexport type IconName =\n  | ${stringifiedIconNames.join(
      "\n  | "
    )}\n`;
    await fs.writeFile(typeOutputFilepath, outputTypeContent, "utf8");

    const outputArrayContent = `${outputGeneratedContent}\nexport const IconNames = [\n  ${stringifiedIconNames.join(
      ",\n  "
    )},\n]\n`;
    await fs.writeFile(arrayOutputFilepath, outputArrayContent, "utf8");

    console.log(`Generated ${files.length} icons`);
  }

  function iconName(file: string) {
    return path.basename(file, ".svg");
  }

  async function generateSvgSprite({
    files,
    inputDir,
    outputPath,
  }: {
    files: string[];
    inputDir: string;
    outputPath: string;
  }) {
    const symbols = await Promise.all(
      files.map(async (file) => {
        const input = await fs.readFile(path.join(inputDir, file), "utf8");
        const root = parse(input);

        const svg = root.querySelector("svg");
        if (!svg) throw new Error(`No SVG element found in ${file}`);

        svg.tagName = "symbol";
        svg.setAttribute("id", iconName(file));
        svg.removeAttribute("xmlns");
        svg.removeAttribute("xmlns:xlink");
        svg.removeAttribute("version");
        svg.removeAttribute("width");
        svg.removeAttribute("height");

        return svg.toString().trim();
      })
    );

    const output = [
      `<?xml version="1.0" encoding="UTF-8"?>`,
      `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="0" height="0">`,
      `<defs>`,
      ...symbols,
      `</defs>`,
      `</svg>`,
      "",
    ].join("\n");

    await fs.ensureDir(path.dirname(outputPath));
    await fs.writeFile(outputPath, output, "utf8");
  }
}

main();
